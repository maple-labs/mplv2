claim()
├── if msg.sender is not the "RECAPITALIZATION_CLAIMER"
│  └── it should revert with "RM:NOT_CLAIMER"
└── when the msg.sender is the "RECAPITALIZATION_CLAIMER"
    ├── if claimable amount is zero
    │  └── it should revert with "RM:ZERO_CLAIM"
    └── if claimable amount is not zero
        ├── it should set lastClaimedTimestamp to the current block.timestamp
        ├── it should set lastClaimedWindowId to the window we just claimed at
        ├── it should emit a {Claimed} event
        └── it should mint the claimable amount of tokens to the Maple Treasury

schedule(uint32[] memory windowStarts, uint208[] memory issuanceRates)
├── if the length of windowStarts is not equal to the length of issuanceRates
│  └── it should revert with "RM:VW:LENGTH_MISMATCH"
└── if the length of windowStarts is equal to the length of issuanceRates
    ├── if length of windowStarts is zero
    │  └── it should revert with "RM:VW:EMPTY_ARRAYS"
    └── if length of windowStarts is greater than zero
        ├── if the first windowStart is not greater than the current block.timestamp
        │  └── it should revert with "RM:VW:OUT_OF_DATE"
        └── if the first windowStart is greater than the current block.timestamp
            ├── if the next window start is not always greater than the previous window start
            │  └── it should revert with "RM:VW:OUT_OF_ORDER"
            └── if the next window start is always greater than the previous window start
                ├── if windowStarts[zero] is not greater then the insertion points window start
                │  └── it should revert with "RM:S:DUPLICATE_WINDOW"
                └── if windowStarts[zero] is greater then the insertion points window start
                    └── it should set the nextWindowId for the insertion point in the linked list
                    └── For each new window being schduled the Window struct is filled in the linekd list
                    └── it should emit a {WindowScheduled} event for each new window being schduled
                    └── it should set lastScheduledWindowId to the last window scheduled
